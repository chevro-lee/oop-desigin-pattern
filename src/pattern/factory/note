简单工厂模式 & 方法工厂模式

如当前包下的两份代码，一个是简单工厂模式示例代码，一个是工厂方法模式，简单工厂模式的选择判断逻辑是在工厂类中，
而工厂方法模式则是提供一个所有要建立类对象的抽象接口，每个对象实现这个接口，这样就将选择判断逻辑移动到了客户端。
这样对比简单工厂模式而言，当有新功能产生，就不需要修改工厂类中的代码，只需要添加一个类来实现公有的工厂接口，如
示例代码中的IFactory接口，满足了面向对象设计程序中的开-闭原则。而缺点就是产生了很多工厂类，使类结构较为复杂。

抽象工厂模式：
根据abst包下的代码，以及他的代码结构来看，抽象工厂模式是由工厂方法模式演变而来，在工厂方法模式下，新增了AbstractFactor
抽象工厂类，这个抽象工厂类抽象了所有的功能方法，如AbstractFactory中的getShape()和getColor()，
然后子工厂ShapeFactory和ColorFactory只继承实现它自己需要的工厂方法，最后提供一个返回AbstractFactory的工厂生产类
FactoryProducer，客户端也使用这个工厂生产类来产生自己需要的工厂。此时的选择判断逻辑也不在客户端了。
完美地体现了依赖倒转原则，开闭原则